/*
 * Copyright (c) 2018 Amr Mokhtar.
 * All Rights Reserved.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

package org.dcu.prm;

import java.io.IOException;
import java.io.StringReader;
import java.util.ArrayList;

import javax.json.Json;
import javax.json.JsonArray;
import javax.json.JsonObject;
import javax.json.JsonReader;

public class Main {

	private static final String WORKSPACE =
			"{\n" +
			"   \"start\": {\n" +
			"      \"x\": 0.5,\n" +
			"      \"y\": 5\n" +
			"   },\n" +
			"   \"goal\": {\n" +
			"      \"x\": 8.5,\n" +
			"      \"y\": 1\n" +
			"   },\n" +
			"   \"bounds\": {\n" +
			"      \"xMin\": 0,\n" +
			"      \"xMax\": 9,\n" +
			"      \"yMin\": 0,\n" +
			"      \"yMax\": 7\n" +
			"   },\n" +
			"   \"circles\": [\n" +
			"      {\n" +
			"         \"xCenter\": 6,\n" +
			"         \"yCenter\": 2,\n" +
			"         \"radius\": 0.9\n" +
			"      },\n" +
			"      {\n" +
			"         \"xCenter\": 4.5,\n" +
			"         \"yCenter\": 5.5,\n" +
			"         \"radius\": 0.6\n" +
			"      }\n" +
			"   ],\n" +
			"   \"rectangles\": [\n" +
			"      {\n" +
			"         \"xCenter\": 2.5,\n" +
			"         \"yCenter\": 2,\n" +
			"         \"width\": 1.4,\n" +
			"         \"height\": 1.4\n" +
			"      },\n" +
			"      {\n" +
			"         \"xCenter\": 4,\n" +
			"         \"yCenter\": 3.5,\n" +
			"         \"width\": 1,\n" +
			"         \"height\": 0.4\n" +
			"      },\n" +
			"      {\n" +
			"         \"xCenter\": 7.5,\n" +
			"         \"yCenter\": 4,\n" +
			"         \"width\": 1.4,\n" +
			"         \"height\": 1\n" +
			"      }\n" +
			"   ]\n" +
			"}";

	private static final String PATHS =
			"[[{\"x\":0.5,\"y\":5.0},{\"x\":0.553436279296875,\"y\":4.6885986328125},{\"x\":1.535888671875,\"y\":4.65740966796875},{\"x\":2.320587158203125,\"y\":4.439727783203125},{\"x\":3.125885009765625,\"y\":4.16436767578125},{\"x\":4.06768798828125,\"y\":3.9742431640625},{\"x\":5.131439208984375,\"y\":3.734771728515625},{\"x\":5.396209716796875,\"y\":3.486541748046875},{\"x\":6.299835205078125,\"y\":3.11932373046875},{\"x\":7.013671875,\"y\":2.6480712890625},{\"x\":7.726959228515625,\"y\":2.146484375},{\"x\":8.48858642578125,\"y\":0.96771240234375},{\"x\":8.5,\"y\":1.0}]," +
			" [{\"x\":0.5,\"y\":5.0},{\"x\":0.44110107421875,\"y\":5.0201416015625},{\"x\":1.500457763671875,\"y\":4.7099609375},{\"x\":2.342559814453125,\"y\":4.5450439453125},{\"x\":3.069854736328125,\"y\":4.400421142578125},{\"x\":3.67767333984375,\"y\":4.34423828125},{\"x\":4.418701171875,\"y\":4.219268798828125},{\"x\":5.2020263671875,\"y\":4.19085693359375},{\"x\":5.7227783203125,\"y\":3.841796875},{\"x\":6.24847412109375,\"y\":3.5093994140625},{\"x\":7.352874755859375,\"y\":2.88092041015625},{\"x\":8.17108154296875,\"y\":2.092864990234375},{\"x\":8.66436767578125,\"y\":0.990570068359375},{\"x\":8.5,\"y\":1.0}]," +
			" [{\"x\":0.5,\"y\":5.0},{\"x\":0.462249755859375,\"y\":4.896026611328125},{\"x\":0.54217529296875,\"y\":4.66339111328125},{\"x\":0.78607177734375,\"y\":4.56939697265625},{\"x\":1.647674560546875,\"y\":3.884307861328125},{\"x\":2.5718994140625,\"y\":3.208404541015625},{\"x\":3.517547607421875,\"y\":2.6514892578125},{\"x\":4.102020263671875,\"y\":1.934783935546875},{\"x\":4.670013427734375,\"y\":1.509674072265625},{\"x\":5.124298095703125,\"y\":0.5810546875},{\"x\":5.8765869140625,\"y\":0.534912109375},{\"x\":6.876617431640625,\"y\":0.6776123046875},{\"x\":7.916748046875,\"y\":0.876495361328125},{\"x\":8.582794189453125,\"y\":0.9578857421875},{\"x\":8.5,\"y\":1.0}]," +
			" [{\"x\":0.5,\"y\":5.0},{\"x\":3.23382568359375,\"y\":4.17034912109375},{\"x\":3.43157958984375,\"y\":4.22161865234375},{\"x\":4.493682861328125,\"y\":4.1810302734375},{\"x\":5.546722412109375,\"y\":3.814666748046875},{\"x\":6.38250732421875,\"y\":3.34619140625},{\"x\":7.271575927734375,\"y\":2.836273193359375},{\"x\":8.5,\"y\":1.0}]," +
			" [{\"x\":0.5,\"y\":5.0},{\"x\":0.26312255859375,\"y\":5.053466796875},{\"x\":0.86517333984375,\"y\":4.97357177734375},{\"x\":1.456787109375,\"y\":4.910125732421875},{\"x\":1.92095947265625,\"y\":4.957763671875},{\"x\":2.2071533203125,\"y\":5.04534912109375},{\"x\":2.92181396484375,\"y\":4.946868896484375},{\"x\":3.50848388671875,\"y\":4.7347412109375},{\"x\":3.624664306640625,\"y\":4.652923583984375},{\"x\":4.2330322265625,\"y\":4.505950927734375},{\"x\":4.689788818359375,\"y\":4.4237060546875},{\"x\":5.10260009765625,\"y\":4.257293701171875},{\"x\":5.46734619140625,\"y\":4.09771728515625},{\"x\":6.115264892578125,\"y\":4.04559326171875},{\"x\":6.55169677734375,\"y\":3.434844970703125},{\"x\":7.219390869140625,\"y\":3.002471923828125},{\"x\":7.843414306640625,\"y\":2.735870361328125},{\"x\":8.06890869140625,\"y\":2.2891845703125},{\"x\":8.713531494140625,\"y\":1.899322509765625},{\"x\":8.849761962890625,\"y\":1.628875732421875},{\"x\":8.85882568359375,\"y\":0.97412109375},{\"x\":8.5,\"y\":1.0}]," +
			" [{\"x\":0.5,\"y\":5.0},{\"x\":0.449615478515625,\"y\":4.993438720703125},{\"x\":0.44769287109375,\"y\":4.734954833984375},{\"x\":0.49932861328125,\"y\":4.183380126953125},{\"x\":0.651763916015625,\"y\":4.035125732421875},{\"x\":0.784149169921875,\"y\":3.50726318359375},{\"x\":1.109893798828125,\"y\":2.8394775390625},{\"x\":1.291717529296875,\"y\":2.30926513671875},{\"x\":1.45513916015625,\"y\":1.71453857421875},{\"x\":1.749847412109375,\"y\":0.9390869140625},{\"x\":2.31207275390625,\"y\":0.826080322265625},{\"x\":2.999267578125,\"y\":0.671417236328125},{\"x\":3.707611083984375,\"y\":0.60882568359375},{\"x\":4.1385498046875,\"y\":0.43878173828125},{\"x\":4.835357666015625,\"y\":0.29949951171875},{\"x\":5.258880615234375,\"y\":0.384521484375},{\"x\":5.746124267578125,\"y\":0.38580322265625},{\"x\":6.205352783203125,\"y\":0.385589599609375},{\"x\":6.9268798828125,\"y\":0.499664306640625},{\"x\":7.759918212890625,\"y\":0.355682373046875},{\"x\":8.189483642578125,\"y\":0.6212158203125},{\"x\":8.720672607421875,\"y\":0.93438720703125},{\"x\":8.5,\"y\":1.0}]," +
			" [{\"x\":0.5,\"y\":5.0},{\"x\":0.44659423828125,\"y\":5.004974365234375},{\"x\":0.315032958984375,\"y\":4.356201171875},{\"x\":0.469940185546875,\"y\":3.7452392578125},{\"x\":0.530364990234375,\"y\":3.23809814453125},{\"x\":0.6910400390625,\"y\":2.76300048828125},{\"x\":0.84429931640625,\"y\":2.255859375},{\"x\":0.9217529296875,\"y\":2.062957763671875},{\"x\":1.270294189453125,\"y\":1.502197265625},{\"x\":1.352142333984375,\"y\":1.328948974609375},{\"x\":1.715240478515625,\"y\":0.95233154296875},{\"x\":1.97589111328125,\"y\":0.6844482421875},{\"x\":2.44281005859375,\"y\":0.462493896484375},{\"x\":3.179168701171875,\"y\":0.28582763671875},{\"x\":3.8616943359375,\"y\":0.224517822265625},{\"x\":4.449462890625,\"y\":0.262115478515625},{\"x\":5.085296630859375,\"y\":0.256134033203125},{\"x\":5.517059326171875,\"y\":0.281341552734375},{\"x\":5.913116455078125,\"y\":0.250579833984375},{\"x\":6.5390625,\"y\":0.207000732421875},{\"x\":7.203460693359375,\"y\":0.129669189453125},{\"x\":7.7310791015625,\"y\":0.248443603515625},{\"x\":8.579498291015625,\"y\":0.646636962890625},{\"x\":8.877777099609375,\"y\":0.938018798828125},{\"x\":8.5,\"y\":1.0}]]";

	public static void main(String[] args) {

		int numNodes = 800;
		int numEdges = 20;
		int maxAttempts = 10;
		double stepSize = 0.1;
		double xMin = 0;
		double xMax = 10;
		double yMin = 0;
		double yMax = 7;

		JsonReader jsonReader = Json.createReader(new StringReader(WORKSPACE));
		JsonObject ws = jsonReader.readObject();
		jsonReader.close();

		Workspace workspace = new Workspace(ws);
		System.out.println(workspace);

		// Read the start and goal position
		double xStart = workspace.xStart;
		double yStart = workspace.yStart;
		double xGoal = workspace.xGoal;
		double yGoal = workspace.yGoal;

		System.out.println("Parameter setup");
		System.out.println("===============");
		System.out.println("#nodes = " + numNodes);
		System.out.println("#edges per node = " + numEdges);
		System.out.println("step size for collision check = " + stepSize);
		System.out.println("xStart = " + xStart);
		System.out.println("yStart = " + yStart);
		System.out.println("xGoal = " + xGoal);
		System.out.println("yGoal = " + yGoal);
		System.out.println("xMin = " + xMin);
		System.out.println("xMax = " + xMax);
		System.out.println("yMin = " + yMin);
		System.out.println("yMax = " + yMax);

		jsonReader = Json.createReader(new StringReader(PATHS));
		JsonArray jsonPaths = jsonReader.readArray();
		jsonReader.close();

		int i, j;
		for (i = 0; i < jsonPaths.size(); i++) {

			double x, y;
			// Collect points in path
			JsonArray jsonPoints = jsonPaths.getJsonArray(i);
			ArrayList<Position> points = new ArrayList<Position>();

			for (j = 0; j < jsonPoints.size(); j++) {

				x = jsonPoints.getJsonObject(j).getJsonNumber("x").doubleValue();
				y = jsonPoints.getJsonObject(j).getJsonNumber("y").doubleValue();
				points.add(new Position(x, y));
			}

			Path path = new Path(points, "R");
			System.out.println("Retrieved Path: " + path.toJSONString());
			workspace.addPath(path);

		}

		PRMPlanner prm = new PRMPlanner();

		// Build the road map used for planning. This map could be used for
		// several queries.
		prm.buildRoadMap(workspace,	numNodes, numEdges, stepSize);

		// Try to find a path
		Path path = prm.findPath(workspace, maxAttempts);

		if (path != null) {
			System.out.println("Found a path with "	+ path.points.size() + " nodes");
			System.out.println("New Path created: " + path.toJSONString());
			workspace.addPath(path);
		} else {
			System.err.println("DID NOT FIND A PATH!!\n");
		}

		try {
			workspace.writeMatlabDisplayCode("PRM_no_edges.m");
			prm.writeMatlabDisplayCode("PRM_no_edges.m", false, true);

			workspace.writeMatlabDisplayCode("PRM_edges.m");
			prm.writeMatlabDisplayCode("PRM_edges.m", true, true);

		} catch (IOException e2) {
			e2.printStackTrace();
		}
	}
}
